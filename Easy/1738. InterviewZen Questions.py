"""In JavaScript, define a function `makeCounter` which takes one optional argument defining the intial value, `start`, with a default value of 0. The function should return an object containing keys that define 3 methods:
  - `value` returns the current value of the counter
  - `increment` increments the value of the counter by 1 and returns the new value
  - `decrement` decrements the value of the counter by 1 and returns the new value

The returned object should not allow direct modification or retrieval of the value.

Example usage:

var counter = makeCounter();
console.log(counter.value());
// 0

var counter2 = makeCounter(4);

console.log(counter2.value());
// 4

console.log(counter2.increment());
// 5
console.log(counter2.value());
// 5

counter2.decrement();
counter2.decrement();
console.log(counter2.decrement());
// 2
"""

class makeCounter:
    def __init__(self, value=0):
        #we want the initial value to be optional, so we set it to 0
        self.value = value
        
    
    def value(self):
        return self.value
    
    def increment(self):
        self.value += 1
        return self.value
    
    def decrement(self):
        self.value -= 1
        return self.value

"""
Question 2
In JavaScript or Python, define a function `foo` which accepts a Python list or JavaScript array of integers and returns a new list where elements with an even index are incremented by 1 and elements with an odd index are decremented by 1. Assume 0 is an even number.

e.g. foo([10, 10, 10, 10, 10]) => [11, 9, 11, 9, 11]
"""

#so we take a python list of ints... return new list where elements with an even index += 1, odd -= 1

def foo(lst):
    new_lst = []
    i = 0
    while i < len(lst):
        if i%2 == 0: #even index
            new_lst.append(lst[i] + 1)
        else:
            new_lst.append(lst[i] - 1)
        
        i+= 1
    
    return new_lst

"""
Question 3
In JavaScript, define a function `minArgs` which accepts any number of numerical arguments and returns the minimum value. Next, show how you would use the function you just created (without modification) to find the minimum of values in an array.

Example:

minArgs(1, -6, 78, 12, 45.5, -6.9); // -6.9
"""
def minArgs(lst):
    #without using min(lst)
    if lst == []:
        return 'no minimum'
        
    minimum = lst[0]
    i = 0
    while i < len(lst):
        if lst[i] < minimum:
            mimimum = lst[i]
        
        i += 1
    
    return minimum 
    
# in javascript
#function minArgs(){
#    let min = 0;
#    for (let i = 0; i < arguments.length; i++){
#        if (arguments[i] < min){
#            min = arguments[i];
#            }
#        }
#    return min
#    }

"""Question 4
In JavaScript, define a function `group` which accepts an array, `collection`, as the first parameter and a function, `grouper`, as the second parameter. `group` should return an object composed of keys generated by running each element of `collection` through `grouper`. The value of each key should be an array of elements responsible for generating that key. 

For example:

group([6.5, 4.2, 6.3], Math.floor);
// { '4': [4.2], '6': [6.5, 6.3] }
"""

import math 

def group(collection, grouper):
    #return an object composed of keys generated by running each element through grouper
    #example of grouper -> math.floor
    d = {}
    i = 0
    while i < len(collection):
        val = grouper(collection[i])
        if collection[i] in d:
            d[val].append(collection[i]) #append the value to the value list
        else:
            d[val] = [collection[i]] #make a new dict entry with the value
        
        i += 1
    
    return d
